package reader;

import java.util.Arrays;

public enum MalwareRisk {
  HIGH(10000, 1),
  MEDIUM(8.5, 0),
  LOW(4.25, -1);

  private final double riskScoreTopValue;
  private final int riskScoreIntValue;

  MalwareRisk(double riskScoreTopValue, int riskScoreIntValue) {
    this.riskScoreTopValue = riskScoreTopValue;
    this.riskScoreIntValue = riskScoreIntValue;
  }

  public double getRiskScoreTopValue() {
    return riskScoreTopValue;
  }

  public int getRiskScoreIntValue() {
    return riskScoreIntValue;
  }

  public static MalwareRisk findMalwareRiskByRiskScoreIntValue(int value) {
    return Arrays.stream(MalwareRisk.values()).filter(r -> r.getRiskScoreIntValue() == value).findFirst().orElseThrow();
  }

  public static MalwareRisk getMalwareRiskByRiskScore(double riskScore) {
    if (riskScore <= LOW.getRiskScoreTopValue()) {
      return LOW;
    }
    else if (riskScore <= MEDIUM.getRiskScoreTopValue()) {
      return MEDIUM;
    }
    else {
      return HIGH;
    }
  }

  public static double getRiskScoreMultiplier() {
    return MalwareRisk.MEDIUM.getRiskScoreTopValue() / MalwareRisk.LOW.getRiskScoreTopValue();
  }
}
